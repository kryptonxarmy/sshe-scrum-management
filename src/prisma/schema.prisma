// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "mysql", "sqlite", "sqlserver"
  url      = env("DATABASE_URL")
}

// User management with role-based access control
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String   // Should be hashed in production
  name      String
  avatar    String?
  role      UserRole @default(TEAM_MEMBER)
  department String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownedProjects    Project[]       @relation("ProjectOwner")
  projectMemberships ProjectMember[]
  taskAssignees    TaskAssignee[]
  createdTasks     Task[]          @relation("TaskCreator")
  comments         Comment[]
  activityLogs     ActivityLog[]
  sessions         UserSession[]

  @@map("users")
}

// User roles enum
enum UserRole {
  SUPERADMIN     // Full system access, user management
  PROJECT_OWNER  // Can create/manage projects, manage tasks
  SCRUM_MASTER   // Can manage tasks, update status, assign tasks
  TEAM_MEMBER    // Can view assigned tasks, update own tasks

  @@map("user_roles")
}

// User sessions for authentication
model UserSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// Projects
model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  department  String?
  ownerId     String
  status      ProjectStatus @default(PLANNING)
  priority    Priority      @default(MEDIUM)
  startDate   DateTime?
  endDate     DateTime?
  progress    Int           @default(0) // 0-100
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Project settings
  allowMemberEdit      Boolean @default(true)
  requireApproval      Boolean @default(false)
  notificationEnabled  Boolean @default(true)

  // Relations
  owner       User            @relation("ProjectOwner", fields: [ownerId], references: [id])
  members     ProjectMember[]
  tasks       Task[]
  functions   ProjectFunction[]
  comments    Comment[]
  activityLogs ActivityLog[]

  @@map("projects")
}

// Project status enum
enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED

  @@map("project_status")
}

// Priority enum (used for both projects and tasks)
enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL

  @@map("priority")
}

// Project members (many-to-many relationship)
model ProjectMember {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  role      ProjectMemberRole @default(MEMBER)
  joinedAt  DateTime @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

// Project member roles
enum ProjectMemberRole {
  OWNER
  SCRUM_MASTER
  MEMBER

  @@map("project_member_roles")
}

// SSHE Functions that projects can be associated with
model Function {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  icon        String? // Icon identifier for UI
  color       String? // Color code for UI

  // Relations
  projects ProjectFunction[]
  tasks    Task[]

  @@map("functions")
}

// Project-Function relationship (many-to-many)
model ProjectFunction {
  id         String @id @default(cuid())
  projectId  String
  functionId String

  // Relations
  project  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  function Function @relation(fields: [functionId], references: [id], onDelete: Cascade)

  @@unique([projectId, functionId])
  @@map("project_functions")
}

// Tasks

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  projectId   String
  functionId  String?
  createdById String
  type        TaskType   @default(STORY)
  priority    Priority   @default(MEDIUM)
  status      TaskStatus @default(TODO)
  dueDate     DateTime?
  startDate   DateTime?
  completedAt DateTime?
  progress    Int        @default(0) // 0-100
  timeSpent   Int        @default(0) // in hours
  estimatedTime Int      @default(0) // in hours
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  function  Function? @relation(fields: [functionId], references: [id])
  createdBy User      @relation("TaskCreator", fields: [createdById], references: [id])
  comments  Comment[]
  activityLogs ActivityLog[]
  attachments  TaskAttachment[]
  assignees TaskAssignee[]

  @@map("tasks")
}

model TaskAssignee {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  assignedAt DateTime @default(now())

  // Relations
  task Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User   @relation(fields: [userId], references: [id])

  @@unique([taskId, userId])
  @@map("task_assignees")
}

// Task types
enum TaskType {
  STORY
  SPIKE
  SPRINT
  QA
  BUG
  FEATURE

  @@map("task_types")
}

// Task status
enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
  BLOCKED

  @@map("task_status")
}

// Task attachments
model TaskAttachment {
  id       String @id @default(cuid())
  taskId   String
  fileName String
  fileUrl  String
  fileSize Int?
  mimeType String?
  uploadedAt DateTime @default(now())

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_attachments")
}

// Comments for projects and tasks
model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  projectId String?
  taskId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author  User     @relation(fields: [authorId], references: [id])
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task    Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("comments")
}

// Activity logging for audit trail
model ActivityLog {
  id        String       @id @default(cuid())
  action    ActivityAction
  userId    String
  projectId String?
  taskId    String?
  details   Json?        // Store additional details as JSON
  createdAt DateTime     @default(now())

  // Relations
  user    User     @relation(fields: [userId], references: [id])
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task    Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
}

// Activity actions enum
enum ActivityAction {
  USER_CREATED
  USER_UPDATED
  USER_DELETED
  USER_ROLE_CHANGED
  PROJECT_CREATED
  PROJECT_UPDATED
  PROJECT_DELETED
  PROJECT_MEMBER_ADDED
  PROJECT_MEMBER_REMOVED
  TASK_CREATED
  TASK_UPDATED
  TASK_DELETED
  TASK_ASSIGNED
  TASK_STATUS_CHANGED
  COMMENT_ADDED
  COMMENT_UPDATED
  COMMENT_DELETED

  @@map("activity_actions")
}

// Notifications
model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  data      Json?            // Additional data as JSON
  createdAt DateTime         @default(now())

  @@map("notifications")
}

// Notification types
enum NotificationType {
  TASK_ASSIGNED
  TASK_DUE_SOON
  TASK_OVERDUE
  PROJECT_UPDATED
  COMMENT_ADDED
  MENTION
  SYSTEM

  @@map("notification_types")
}

// System settings
model SystemSetting {
  id    String @id @default(cuid())
  key   String @unique
  value String
  description String?
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}
