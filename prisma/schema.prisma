// Prisma Schema for SSHE Scrum Application
// This schema defines the database structure for a role-based task management system
// with authentication, projects, tasks, and activity tracking

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // You can change this to "mysql" or "sqlite" as needed
  url      = env("DATABASE_URL")
}

// =====================================
// ENUMS
// =====================================

enum UserRole {
  SUPERADMIN
  PROJECT_OWNER
  SCRUM_MASTER
  TEAM_MEMBER
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
  BLOCKED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ActivityType {
  PROJECT_CREATED
  PROJECT_UPDATED
  PROJECT_DELETED
  TASK_CREATED
  TASK_UPDATED
  TASK_DELETED
  TASK_ASSIGNED
  TASK_STATUS_CHANGED
  MEMBER_ADDED
  MEMBER_REMOVED
  COMMENT_ADDED
  FILE_UPLOADED
  SPRINT_CREATED
  SPRINT_STARTED
  SPRINT_COMPLETED
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_DUE_SOON
  PROJECT_UPDATE
  MENTION
  SYSTEM_ALERT
}

// =====================================
// USER MODELS
// =====================================

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String   // Should be hashed in real implementation
  name        String
  avatar      String?  // Could be initials or image URL
  role        UserRole @default(TEAM_MEMBER)
  department  String?
  isActive    Boolean  @default(true)
  lastLoginAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  ownedProjects     Project[]         @relation("ProjectOwner")
  projectMemberships ProjectMember[]
  assignedTasks     Task[]            @relation("TaskAssignee")
  createdTasks      Task[]            @relation("TaskCreator")
  comments          Comment[]
  activityLogs      ActivityLog[]
  notifications     Notification[]
  userSettings      UserSettings?

  @@map("users")
}

model UserSettings {
  id                     String  @id @default(cuid())
  userId                 String  @unique
  emailNotifications     Boolean @default(true)
  pushNotifications      Boolean @default(true)
  taskReminders          Boolean @default(true)
  weeklyDigest           Boolean @default(true)
  theme                  String  @default("light") // light, dark, system
  language               String  @default("en")
  timezone               String  @default("UTC")
  dateFormat             String  @default("MM/DD/YYYY")
  defaultProjectView     String  @default("kanban") // kanban, list, calendar
  autoAssignTasks        Boolean @default(false)
  showCompletedTasks     Boolean @default(false)
  taskNotificationSound  Boolean @default(true)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

// =====================================
// PROJECT MODELS
// =====================================

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?       @db.Text
  department  String
  status      ProjectStatus @default(PLANNING)
  priority    Priority      @default(MEDIUM)
  startDate   DateTime?
  endDate     DateTime?
  progress    Int           @default(0) // 0-100
  isArchived  Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Owner relationship
  ownerId String
  owner   User   @relation("ProjectOwner", fields: [ownerId], references: [id])

  // Relationships
  members      ProjectMember[]
  tasks        Task[]
  sprints      Sprint[]
  functions    Function[]
  comments     Comment[]
  activityLogs ActivityLog[]
  settings     ProjectSettings?

  @@map("projects")
}

model ProjectMember {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  joinedAt  DateTime @default(now())
  isActive  Boolean  @default(true)

  // Relationships
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

model ProjectSettings {
  id                  String  @id @default(cuid())
  projectId           String  @unique
  allowMemberEdit     Boolean @default(true)
  requireApproval     Boolean @default(false)
  notificationEnabled Boolean @default(true)
  autoArchiveTasks    Boolean @default(false)
  enableTimeTracking  Boolean @default(true)
  enableComments      Boolean @default(true)
  enableFileUpload    Boolean @default(true)
  maxFileSize         Int     @default(10) // MB
  allowedFileTypes    String  @default("pdf,doc,docx,xls,xlsx,png,jpg,jpeg")
  sprintDuration      Int     @default(14) // days
  taskAutoAssign      Boolean @default(false)
  requireTaskEstimate Boolean @default(false)

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_settings")
}

// =====================================
// TASK MODELS
// =====================================

model Task {
  id            String     @id @default(cuid())
  title         String
  description   String?    @db.Text
  status        TaskStatus @default(TODO)
  priority      Priority   @default(MEDIUM)
  storyPoints   Int?       // For estimation
  timeSpent     Float      @default(0) // Hours
  progress      Int        @default(0) // 0-100
  dueDate       DateTime?
  completedAt   DateTime?
  isArchived    Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Relationships
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  assigneeId String?
  assignee   User?   @relation("TaskAssignee", fields: [assigneeId], references: [id])

  createdById String
  createdBy   User   @relation("TaskCreator", fields: [createdById], references: [id])

  sprintId String?
  sprint   Sprint? @relation(fields: [sprintId], references: [id])

  functionId String?
  function   Function? @relation(fields: [functionId], references: [id])

  // Child relationships
  comments       Comment[]
  activityLogs   ActivityLog[]
  taskAttachments TaskAttachment[]
  dependencies   TaskDependency[] @relation("DependentTask")
  dependents     TaskDependency[] @relation("DependsOnTask")

  @@map("tasks")
}

model TaskDependency {
  id              String @id @default(cuid())
  dependentTaskId String // Task that depends on another
  dependsOnTaskId String // Task that this task depends on
  
  dependentTask Task @relation("DependentTask", fields: [dependentTaskId], references: [id], onDelete: Cascade)
  dependsOnTask Task @relation("DependsOnTask", fields: [dependsOnTaskId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())

  @@unique([dependentTaskId, dependsOnTaskId])
  @@map("task_dependencies")
}

model TaskAttachment {
  id          String   @id @default(cuid())
  taskId      String
  fileName    String
  originalName String
  filePath    String
  fileSize    Int      // bytes
  mimeType    String
  uploadedBy  String
  uploadedAt  DateTime @default(now())

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_attachments")
}

// =====================================
// SPRINT MODELS
// =====================================

model Sprint {
  id          String    @id @default(cuid())
  name        String
  goal        String?   @db.Text
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean   @default(false)
  isCompleted Boolean   @default(false)
  projectId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks   Task[]

  @@map("sprints")
}

// =====================================
// FUNCTION MODELS (for Scrum Functions)
// =====================================

model Function {
  id          String   @id @default(cuid())
  name        String   // e.g., "Sprint Planning", "Daily Standups", "Sprint Review"
  description String?  @db.Text
  projectId   String
  isActive    Boolean  @default(true)
  order       Int      @default(0) // For sorting
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks   Task[]

  @@map("functions")
}

// =====================================
// COMMUNICATION MODELS
// =====================================

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  taskId    String?
  projectId String?
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  task    Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  author  User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("comments")
}

// =====================================
// ACTIVITY & NOTIFICATION MODELS
// =====================================

model ActivityLog {
  id          String       @id @default(cuid())
  type        ActivityType
  description String
  metadata    Json?        // Additional data about the activity
  userId      String       // Who performed the action
  projectId   String?      // Related project
  taskId      String?      // Related task
  createdAt   DateTime     @default(now())

  // Relationships
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task    Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String           @db.Text
  isRead    Boolean          @default(false)
  userId    String
  projectId String?
  taskId    String?
  actionUrl String?          // URL to navigate when notification is clicked
  metadata  Json?            // Additional data
  createdAt DateTime         @default(now())
  readAt    DateTime?

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// =====================================
// SYSTEM MODELS - NON MVP
// =====================================

model SystemSettings {
  id                    String   @id @default(cuid())
  siteName              String   @default("SSHE Scrum")
  siteDescription       String   @default("Safety, Security, Health & Environment Scrum Management")
  logoUrl               String?
  primaryColor          String   @default("#3B82F6")
  secondaryColor        String   @default("#10B981")
  maintenanceMode       Boolean  @default(false)
  maintenanceMessage    String?
  allowUserRegistration Boolean  @default(false)
  maxProjectsPerUser    Int      @default(10)
  maxTasksPerProject    Int      @default(1000)
  maxFileUploadSize     Int      @default(10) // MB
  sessionTimeout        Int      @default(24) // hours
  passwordMinLength     Int      @default(8)
  requirePasswordChange Boolean  @default(false)
  passwordChangeInterval Int     @default(90) // days
  enableAuditLog        Boolean  @default(true)
  backupEnabled         Boolean  @default(true)
  backupInterval        Int      @default(24) // hours
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("system_settings")
}

// =====================================
// REPORTING MODELS
// =====================================

model Report {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  type        String   // "project", "task", "user", "performance"
  query       Json     // Stored report query/configuration
  isPublic    Boolean  @default(false)
  createdById String
  projectId   String?  // If report is project-specific
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("reports")
}

// =====================================
// AUDIT MODELS
// =====================================

model AuditLog {
  id         String   @id @default(cuid())
  action     String   // CREATE, UPDATE, DELETE, LOGIN, LOGOUT
  tableName  String   // Which table was affected
  recordId   String?  // ID of the affected record
  oldValues  Json?    // Previous values (for updates)
  newValues  Json?    // New values (for creates/updates)
  userId     String?  // Who performed the action
  ipAddress  String?  // IP address of the user
  userAgent  String?  // Browser/client information
  timestamp  DateTime @default(now())

  @@map("audit_logs")
}
