generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String          @id @default(cuid())
  email              String          @unique
  password           String
  name               String
  avatar             String?
  role               UserRole        @default(TEAM_MEMBER)
  department         String?
  isActive           Boolean         @default(true)
  lastLoginAt        DateTime?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  activityLogs       ActivityLog[]
  comments           Comment[]
  createdEvents      Event[]
  notifications      Notification[]
  projectMemberships ProjectMember[]
  ownedProjects      Project[]       @relation("ProjectOwner")
  taskAssignees      TaskAssignee[]
  createdTasks       Task[]          @relation("TaskCreator")
  userSettings       UserSettings?

  @@map("users")
}

model UserSettings {
  id                    String  @id @default(cuid())
  userId                String  @unique
  emailNotifications    Boolean @default(true)
  pushNotifications     Boolean @default(true)
  taskReminders         Boolean @default(true)
  weeklyDigest          Boolean @default(true)
  theme                 String  @default("light")
  language              String  @default("en")
  timezone              String  @default("UTC")
  dateFormat            String  @default("MM/DD/YYYY")
  defaultProjectView    String  @default("kanban")
  autoAssignTasks       Boolean @default(false)
  showCompletedTasks    Boolean @default(false)
  taskNotificationSound Boolean @default(true)
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Project {
  id           String           @id @default(cuid())
  name         String
  description  String?
  department   String
  status       ProjectStatus    @default(PLANNING)
  priority     Priority         @default(MEDIUM)
  startDate    DateTime?
  endDate      DateTime?
  progress     Int              @default(0)
  isArchived   Boolean          @default(false)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  ownerId      String
  activityLogs ActivityLog[]
  comments     Comment[]
  events       Event[]
  functions    Function[]
  members      ProjectMember[]
  settings     ProjectSettings?
  owner        User             @relation("ProjectOwner", fields: [ownerId], references: [id])
  sprints      Sprint[]
  tasks        Task[]

  @@map("projects")
}

model ProjectMember {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  joinedAt  DateTime @default(now())
  isActive  Boolean  @default(true)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

model ProjectSettings {
  id                  String  @id @default(cuid())
  projectId           String  @unique
  allowMemberEdit     Boolean @default(true)
  requireApproval     Boolean @default(false)
  notificationEnabled Boolean @default(true)
  autoArchiveTasks    Boolean @default(false)
  enableTimeTracking  Boolean @default(true)
  enableComments      Boolean @default(true)
  enableFileUpload    Boolean @default(true)
  maxFileSize         Int     @default(10)
  allowedFileTypes    String  @default("pdf,doc,docx,xls,xlsx,png,jpg,jpeg")
  sprintDuration      Int     @default(14)
  taskAutoAssign      Boolean @default(false)
  requireTaskEstimate Boolean @default(false)
  project             Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_settings")
}

model Task {
  id              String           @id @default(cuid())
  title           String
  description     String?
  status          TaskStatus       @default(TODO)
  priority        Priority         @default(MEDIUM)
  storyPoints     Int?
  estimatedTime   Float?
  timeSpent       Float            @default(0)
  progress        Int              @default(0)
  dueDate         DateTime?
  completedAt     DateTime?
  isArchived      Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  projectId       String
  createdById     String
  sprintId        String?
  functionId      String?
  activityLogs    ActivityLog[]
  comments        Comment[]
  taskAssignees   TaskAssignee[]
  taskAttachments TaskAttachment[]
  dependencies    TaskDependency[] @relation("DependentTask")
  dependents      TaskDependency[] @relation("DependsOnTask")
  createdBy       User             @relation("TaskCreator", fields: [createdById], references: [id])
  function        Function?        @relation(fields: [functionId], references: [id])
  project         Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sprint          Sprint?          @relation(fields: [sprintId], references: [id])

  @@map("tasks")
}

model TaskDependency {
  id              String   @id @default(cuid())
  dependentTaskId String
  dependsOnTaskId String
  taskDesc        String?
  createdAt       DateTime @default(now())
  dependentTask   Task     @relation("DependentTask", fields: [dependentTaskId], references: [id], onDelete: Cascade)
  dependsOnTask   Task     @relation("DependsOnTask", fields: [dependsOnTaskId], references: [id], onDelete: Cascade)

  @@unique([dependentTaskId, dependsOnTaskId])
  @@map("task_dependencies")
}

model TaskAttachment {
  id           String   @id @default(cuid())
  taskId       String
  fileName     String
  originalName String
  filePath     String
  fileSize     Int
  mimeType     String
  uploadedBy   String
  uploadedAt   DateTime @default(now())
  task         Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_attachments")
}

model Sprint {
  id          String   @id @default(cuid())
  name        String
  goal        String?
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(false)
  isCompleted Boolean  @default(false)
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@map("sprints")
}

model Function {
  id          String   @id @default(cuid())
  name        String
  description String?
  projectId   String
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@map("functions")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  taskId    String?
  projectId String?
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task      Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model ActivityLog {
  id          String       @id @default(cuid())
  type        ActivityType
  description String
  metadata    Json?
  userId      String
  projectId   String?
  taskId      String?
  createdAt   DateTime     @default(now())
  project     Project?     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task        Task?        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  userId    String
  projectId String?
  taskId    String?
  actionUrl String?
  metadata  Json?
  createdAt DateTime         @default(now())
  readAt    DateTime?
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model SystemSettings {
  id                     String   @id @default(cuid())
  siteName               String   @default("SSHE Scrum")
  siteDescription        String   @default("Safety, Security, Health & Environment Scrum Management")
  logoUrl                String?
  primaryColor           String   @default("#3B82F6")
  secondaryColor         String   @default("#10B981")
  maintenanceMode        Boolean  @default(false)
  maintenanceMessage     String?
  allowUserRegistration  Boolean  @default(false)
  maxProjectsPerUser     Int      @default(10)
  maxTasksPerProject     Int      @default(1000)
  maxFileUploadSize      Int      @default(10)
  sessionTimeout         Int      @default(24)
  passwordMinLength      Int      @default(8)
  requirePasswordChange  Boolean  @default(false)
  passwordChangeInterval Int      @default(90)
  enableAuditLog         Boolean  @default(true)
  backupEnabled          Boolean  @default(true)
  backupInterval         Int      @default(24)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@map("system_settings")
}

model Report {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String
  query       Json
  isPublic    Boolean  @default(false)
  createdById String
  projectId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("reports")
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  tableName String
  recordId  String?
  oldValues Json?
  newValues Json?
  userId    String?
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())

  @@map("audit_logs")
}

model Event {
  id                 String    @id @default(cuid())
  title              String
  description        String?
  startDate          DateTime
  endDate            DateTime
  isRecurring        Boolean   @default(false)
  recurringType      String?
  recurringDayOfWeek Int?
  recurringEndDate   DateTime?
  parentEventId      String?
  projectId          String?
  createdById        String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  createdBy          User      @relation(fields: [createdById], references: [id])
  parentEvent        Event?    @relation("EventRecurrence", fields: [parentEventId], references: [id])
  childEvents        Event[]   @relation("EventRecurrence")
  project            Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("events")
}

model TaskAssignee {
  id     Int    @id @default(autoincrement())
  taskId String
  userId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
  @@map("task_assignees")
}

enum UserRole {
  SUPERADMIN
  PROJECT_OWNER
  SCRUM_MASTER
  TEAM_MEMBER
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}


enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ActivityType {
  PROJECT_CREATED
  PROJECT_UPDATED
  PROJECT_DELETED
  TASK_CREATED
  TASK_UPDATED
  TASK_DELETED
  TASK_ASSIGNED
  TASK_STATUS_CHANGED
  MEMBER_ADDED
  MEMBER_REMOVED
  COMMENT_ADDED
  FILE_UPLOADED
  SPRINT_CREATED
  SPRINT_STARTED
  SPRINT_COMPLETED
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_DUE_SOON
  PROJECT_UPDATE
  MENTION
  SYSTEM_ALERT
}
